head	1.7;
access;
symbols;
locks
	claude:1.7; strict;
comment	@# @;


1.7
date	2022.06.10.15.23.19;	author claude;	state Exp;
branches;
next	1.6;

1.6
date	2022.05.14.15.36.32;	author claude;	state Exp;
branches;
next	1.5;

1.5
date	2022.05.01.12.43.39;	author claude;	state Exp;
branches;
next	1.4;

1.4
date	2022.04.29.21.48.10;	author claude;	state Exp;
branches;
next	1.3;

1.3
date	2022.04.22.20.39.20;	author claude;	state Exp;
branches;
next	1.2;

1.2
date	2022.04.14.17.47.39;	author claude;	state Exp;
branches;
next	1.1;

1.1
date	2022.04.14.17.39.33;	author claude;	state Exp;
branches;
next	;


desc
@Initial
@


1.7
log
@makefile cleanup
@
text
@#################################################################
##  $RCSfile: Makefile,v $
##  $Revision: 1.6 $
##  $Date: 2022/05/14 15:36:32 $
##  $Author: claude $
#################################################################


# simple AVR Makefile
#
# written by michael cousins (http://github.com/mcous)
# released to the public domain

# Makefile
#
# targets:
#   all:    compiles the source code
#   test:   tests the isp connection to the mcu
#   flash:  writes compiled hex file to the mcu's flash memory
#   fuse:   writes the fuse bytes to the MCU
#   disasm: disassembles the code for debugging
#   clean:  removes all .hex, .elf, and .o files in the source code and library directories

# parameters (change this stuff accordingly)

# project name
PRJ = main

# avr mcu
#MCU = m328p
MCU = atmega328p

# mcu clock frequency
CLK = 16000000

# avr programmer (and port if necessary)
#  PRG = stk500v1  -P /dev/ttyACM0 -b 19200     # Arduino Nano v3 Abra
PRG = arduino -P /dev/ttyACM0 -b 115200       # Arduino Uno

## avrdude configuration parameters
AVRDUDE_PARAMS = -C /usr/share/arduino/hardware/tools/avrdude.conf -v -v -p $(MCU) -c $(PRG) -D

# fuse values for avr: low, high, and extended
# these values are from an Arduino Uno (ATMega328P)
# see http://www.engbedded.com/fusecalc/ for other MCUs and options
LFU = 0xFF
HFU = 0xDA
EFU = 0xFD

# program source files (not including external libraries)
SRC = $(PRJ).cpp

# where to look for external libraries (consisting of .c/.cpp files and .h files)
# e.g. EXT = ../../EyeToSee ../../YouSART
EXT =


#################################################################################################
# \/ stuff nobody needs to worry about until such time that worrying about it is appropriate \/ #
#################################################################################################

# include path
INCLUDE := $(foreach dir, $(EXT), -I$(dir))
# c flags
CFLAGS    = -Wall -Os -DF_CPU=$(CLK) -mmcu=$(MCU) $(INCLUDE)
# any aditional flags for c++
CPPFLAGS =

# executables
AVRDUDE = avrdude $(AVRDUDE_PARAMS)
OBJCOPY = avr-objcopy
OBJDUMP = avr-objdump
SIZE    = avr-size --format=avr --mcu=$(MCU)
CC      = avr-gcc

# generate list of objects
CFILES    = $(filter %.c, $(SRC))
EXTC     := $(foreach dir, $(EXT), $(wildcard $(dir)/*.c))
CPPFILES  = $(filter %.cpp, $(SRC))
EXTCPP   := $(foreach dir, $(EXT), $(wildcard $(dir)/*.cpp))
OBJ       = $(CFILES:.c=.o) $(EXTC:.c=.o) $(CPPFILES:.cpp=.o) $(EXTCPP:.cpp=.o)

# user targets
# compile all files
all: $(PRJ).hex

# test programmer connectivity
test:
	$(AVRDUDE) -v -v -v -v

# flash program to mcu
flash: all
	$(AVRDUDE) -U flash:w:$(PRJ).hex:i

# write fuses to mcu
fuse:
	$(AVRDUDE) -U lfuse:w:$(LFU):m -U hfuse:w:$(HFU):m -U efuse:w:$(EFU):m

# generate disassembly files for debugging
disasm: $(PRJ).elf
	$(OBJDUMP) -d $(PRJ).elf

# remove compiled files
clean:
	rm -f *.hex *.elf *.o
	$(foreach dir, $(EXT), rm -f $(dir)/*.o;)

# other targets
# objects from c files
.c.o:
	$(CC) $(CFLAGS) -c $< -o $@@

# objects from c++ files
.cpp.o:
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@@

# elf file
$(PRJ).elf: $(OBJ)
	$(CC) $(CFLAGS) -o $(PRJ).elf $(OBJ)

# hex file
$(PRJ).hex: $(PRJ).elf
	rm -f $(PRJ).hex
	$(OBJCOPY) -j .text -j .data -O ihex $(PRJ).elf $(PRJ).hex
	$(SIZE) $(PRJ).elf
@


1.6
log
@updated for new programmer.
@
text
@d3 2
a4 2
##  $Revision: 1.5 $
##  $Date: 2022/05/01 12:43:39 $
d37 5
a41 3
# e.g. PRG = usbtiny -or- PRG = arduino -P /dev/tty.usbmodem411
## PRG = usbtiny
PRG = stk500v1  -P /dev/ttyACM0 -b 19200 -V -e -C /usr/share/arduino/hardware/tools/avrdude.conf
d70 1
a70 1
AVRDUDE = avrdude -c $(PRG) -p $(MCU)
d89 1
a89 1
	$(AVRDUDE) -v
@


1.5
log
@woring.
@
text
@d3 2
a4 2
##  $Revision: 1.4 $
##  $Date: 2022/04/29 21:48:10 $
d30 1
a30 1
MCU = m328p
d39 1
a39 1
PRG = stk500v1  -P /dev/ttyUSB0 -b 19200 -V -e -C /usr/share/arduino/hardware/tools/avrdude.conf
@


1.4
log
@BLINK 125ms loop
@
text
@d3 2
a4 2
##  $Revision: 1.3 $
##  $Date: 2022/04/22 20:39:20 $
d25 1
d28 1
d32 1
d35 1
d40 1
d45 3
a47 2
HFU = 0xDE
EFU = 0x05
d50 1
@


1.3
log
@update
@
text
@d3 2
a4 2
##  $Revision: 1.2 $
##  $Date: 2022/04/14 17:47:39 $
a35 1
##PRG = stk500v1 -P /dev/ttyUSB0 -b 19200 -v -e
@


1.2
log
@token
@
text
@d2 4
a5 4
##  $RCSfile: $
##  $Revision: $
##  $Date: $
##  $Author: $
d35 2
a36 2
##PRG = stk502  -P /dev/ttyUSB0 -b 19200 -C/usr/share/arduino/hardware/tools/avrdude.conf
PRG = stk500v1 -P /dev/ttyUSB0 -b 19200 -v -e
@


1.1
log
@Initial revision
@
text
@d1 8
@
